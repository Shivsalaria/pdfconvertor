import { createSlice } from '@reduxjs/toolkit';
import { fetchVulnerabilities, createVulnerability, updateVulnerability, deleteVulnerability } from '../actions/vulnerabilityActions';

const initialState = {
  vulnerabilities: [],
  loading: false,
  error: null,
  selectedVulnerability: null,
};

const vulnerabilitySlice = createSlice({
  name: 'vulnerabilities',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    setSelectedVulnerability: (state, action) => {
      state.selectedVulnerability = action.payload;
    },
  },
  extraReducers: (builder) => {
    // Fetch Vulnerabilities
    builder
      .addCase(fetchVulnerabilities.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchVulnerabilities.fulfilled, (state, action) => {
        state.loading = false;
        state.vulnerabilities = action.payload;
      })
      .addCase(fetchVulnerabilities.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });

    // Create Vulnerability
    builder
      .addCase(createVulnerability.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(createVulnerability.fulfilled, (state, action) => {
        state.loading = false;
        state.vulnerabilities.unshift(action.payload);
      })
      .addCase(createVulnerability.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });

    // Update Vulnerability
    builder
      .addCase(updateVulnerability.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateVulnerability.fulfilled, (state, action) => {
        state.loading = false;
        const index = state.vulnerabilities.findIndex(vuln => vuln.id === action.payload.id);
        if (index !== -1) {
          state.vulnerabilities[index] = action.payload;
        }
      })
      .addCase(updateVulnerability.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });

    // Delete Vulnerability
    builder
      .addCase(deleteVulnerability.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(deleteVulnerability.fulfilled, (state, action) => {
        state.loading = false;
        state.vulnerabilities = state.vulnerabilities.filter(
          vuln => vuln.id !== action.payload
        );
      })
      .addCase(deleteVulnerability.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const { clearError, setSelectedVulnerability } = vulnerabilitySlice.actions;
export default vulnerabilitySlice.reducer; 