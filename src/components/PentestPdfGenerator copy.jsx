import jsPDF from 'jspdf';
import 'jspdf-autotable';

const PentestPdfGenerator = ({
    clientName,
    clientAddress,
    vendorName,
    vendorAddress,
    date,
    contactName,
    projectDuration,
    reportDelivery,
    reportFrequency,
    includeWebTesting,
    includeNetworkTesting,
    includeDatabaseTesting,
    includeRoleTesting,
    systemInfoTable,
    locationTable,
    ipAddressTable,
    webAppTable,
    databaseTable,
    rolesTable,
    includedTestingItems,
    excludedTestingItems,
}) => {

    const generatePDF = () => {
        // Create new PDF document
        const pdf = new jsPDF('p', 'mm', 'a4');
        
        // Add company logo placeholder
        // const addLogo = () => {
        //   // Draw a placeholder rectangle for logo
        //   pdf.setDrawColor(200, 200, 200);
        //   pdf.setFillColor(240, 240, 240);
        //   pdf.roundedRect(20, 15, 40, 15, 2, 2, 'FD');
        //   pdf.setFontSize(8);
        //   pdf.setTextColor(100, 100, 100);
        //   pdf.text('COMPANY LOGO', 40, 23, {align: 'center'});
        // };
        
        // Add watermark to each page
        const addWatermark = () => {
          // Save current state
          const currentFontSize = pdf.getFontSize();
          const currentTextColor = pdf.getTextColor();
          const currentFontStyle = pdf.getFont();
          
          // Set watermark properties
          pdf.setFont('helvetica', 'italic');
          pdf.setFontSize(72); // Larger font size
          pdf.setTextColor(240, 240, 240); // Even lighter gray for subtlety
          
          // Calculate page dimensions
          const pageWidth = pdf.internal.pageSize.width;
          const pageHeight = pdf.internal.pageSize.height;
          
          // Add multiple watermarks to cover the page
          for(let y = 0; y < pageHeight + 100; y += 120) { // Increased spacing
            for(let x = -50; x < pageWidth + 100; x += 200) { // Multiple columns
              pdf.saveGraphicsState();
              pdf.translate(x, y);
              pdf.rotate(-45); // Diagonal angle
              pdf.text('CONFIDENTIAL', 0, 0, {
                align: 'center',
                baseline: 'middle'
              });
              pdf.restoreGraphicsState();
            }
          }
          
          // Restore previous state
          pdf.setFontSize(currentFontSize);
          pdf.setTextColor(currentTextColor);
          pdf.setFont(currentFontStyle.fontName, currentFontStyle.fontStyle);
        };
        
        // Add header to each page
        const addHeader = (pageNumber) => {
          // Add light gray background for full header width
          pdf.setFillColor(245, 245, 245); // Light gray color
          pdf.rect(0, 0, pdf.internal.pageSize.width, 15, 'F'); // Full width with 15px height
          
          if (pageNumber === 1) {
            // Add document title in center only on first page
            pdf.setFont('helvetica', 'bold');
            pdf.setFontSize(12); // Reduced font size for smaller header
            pdf.setTextColor(51,51,51);
            pdf.text('PEN TEST ENGAGEMENT LETTER', pdf.internal.pageSize.width/2, 28, {align: 'center'}); // Adjusted Y position for smaller header
          }
        };
        
        // Add footer to each page
        const addFooter = () => {
          const pageHeight = pdf.internal.pageSize.height;
          
          // Add line with light gray color and make it thinner
          pdf.setDrawColor(220, 220, 220); // Lighter gray color
          pdf.setLineWidth(0.1); // Thinner line
          pdf.line(20, pageHeight - 15, pdf.internal.pageSize.width - 20, pageHeight - 15); // Added 20mm margins
          
          // Add confidentiality text in red
          pdf.setFont('helvetica', 'italic');
          pdf.setFontSize(8);
          pdf.setTextColor(255, 0, 0); // Red color for CONFIDENTIAL
          pdf.text('CONFIDENTIAL', pdf.internal.pageSize.width/2, pageHeight - 10, {align: 'center'});
          
          // Add date and page number
          pdf.setTextColor(100, 100, 100); // Reset to gray for other text
          const currentDate = new Date().toLocaleDateString();
          pdf.text(`Generated on: ${currentDate}`, 20, pageHeight - 5); // Added 20mm left margin
          pdf.text(`Page ${pageNumber}`, pdf.internal.pageSize.width - 20, pageHeight - 5, {align: 'right'}); // Added 20mm right margin
        };
        
        // Function to add a section title with styling
        const addSectionTitle = (title, yPosition) => {
          // Add background rectangle
          pdf.setFillColor(240, 240, 240);
          pdf.rect(20, yPosition - 6, pdf.internal.pageSize.width - 40, 10, 'F');
          
          // Add section title
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(12);
          pdf.setTextColor(0, 80, 170);
          pdf.text(title, 25, yPosition);
          
          return yPosition + 15; // Return the new Y position after the title
        };
        
        // Function to add a subsection title with styling
        const addSubsectionTitle = (title, yPosition) => {
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(11);
          pdf.setTextColor(80, 80, 80);
          pdf.text(title, 20, yPosition);
          
          // Add underline
          pdf.setDrawColor(200, 200, 200);
          pdf.setLineWidth(0.2);
          pdf.line(25, yPosition + 1, 25 + pdf.getTextWidth(title), yPosition + 1);
          
          return yPosition + 10; // Return the new Y position after the title
        };
        
        // Function to add a styled paragraph
        const addParagraph = (text, yPosition, indent = 0) => {
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(10);
          pdf.setTextColor(60, 60, 60);
          
          const splitText = pdf.splitTextToSize(text, pdf.internal.pageSize.width - 40 - indent);
          pdf.text(splitText, 20 + indent, yPosition);
          
          // Calculate new Y position based on number of lines
          return yPosition + (splitText.length * 5) + 5;
        };
        
        // Function to add a styled table
        const addStyledTable = (headers, data, yPosition, title = null) => {
          if (title) {
            pdf.setFont('helvetica', 'bold');
            pdf.setFontSize(10);
            pdf.setTextColor(80, 80, 80);
            pdf.text(title, 20, yPosition - 5);
          }
          
          pdf.autoTable({
            startY: yPosition,
            head: [headers],
            body: data,
            margin: { left: 20, right: 20 },
            headStyles: { 
              fillColor: [0, 0, 0], 
              textColor: 255,
              fontStyle: 'bold'
            },
            styles: {
              fontSize: 9,
              cellPadding: 3
            },
            alternateRowStyles: {
              fillColor: [240, 240, 240]
            },
            // tableLineColor: [200, 200, 200],
            // tableLineWidth: 0.1
          });
          
          return pdf.lastAutoTable.finalY + 10;
        };
        
        // Start building the PDF
        let pageNumber = 1;
        let currentY = 45; // Increased to account for heading position
        
        // Add header and footer to first page
        addHeader(pageNumber);
        addFooter();
        
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        pdf.text(date, 20, currentY);
        currentY += 5;
        pdf.text(clientName, 20, currentY);
        currentY += 5;
        pdf.text(clientAddress, 20, currentY);
        currentY += 8;
        
        // Add greeting with styling
        pdf.setFont('helvetica', 'bold');
        pdf.text(`Dear ${contactName},`, 20, currentY);
        currentY += 10;
        
        // Add opening paragraph with word wrapping and styling
        const openingText = `This letter agreement, if acceptable to and countersigned by you, will serve as the agreement ("Agreement") between ${clientName} and ${vendorName} governing ${vendorName}'s conduct of the Pen Test ("Pen Test") required by the "Pen Test Section" of this Engagement Letter. The effective date of the Agreement (the "Effective Date") will be the date on which this letter agreement is executed by ${clientName}. ${vendorName} and ${clientName} are each referred to herein as a "Party" and collectively, the "Parties."`;
        currentY = addParagraph(openingText, currentY);
        currentY += 2;
        
        // Background section with styling
        currentY = addSectionTitle('1. BACKGROUND', currentY);
        
        const backgroundText = `The ${clientName} board requires, within 45 days of the date of the respective board meeting, to retain an independent consultant to conduct an independent security review of all ${clientName} information systems. The review is to include a comprehensive vulnerability and risk assessment, security posture assessment, and assessment of security controls implemented across ${clientName} information systems. This Agreement, together with its attachments, constitutes that engagement letter.`;
        currentY = addParagraph(backgroundText, currentY);
        
        currentY = addSectionTitle('2. ORGANIZATION OF THIS AGREEMENT', currentY);
        
        const organizationText = `Section 3 of this document sets forth the scope of pen testing service, section 4 list the proposed services, section 5 prescribes the timing of pen testing services, section 6 defines reporting requirements and section 7 sets forth the terms and conditions for this pen test assignment.`;
        currentY = addParagraph(organizationText, currentY);
        currentY += 5;
            if (currentY > pdf.internal.pageSize.height - 80) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 40;
        }
        currentY = addSectionTitle('3. SCOPE OF PEN TESTING SERVICE', currentY);
        currentY = addSubsectionTitle('I. System Name/Title', currentY);
        currentY += 5;
        
        const systemTableData = systemInfoTable.map(row => [
          row.identifier,
          row.systemName,
          row.abbreviation
        ]);
        
        currentY = addStyledTable(
          ['Unique Identifier', 'Information System Name', 'Information System Abbreviation'],
          systemTableData,
          currentY,
          'Table 1-1. Information System Name and Title'
        );
        
        // Check if we need a new page based on remaining space
        if (currentY > pdf.internal.pageSize.height - 120) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        // currentY += 10;
        currentY = addSubsectionTitle('II. IP Addresses Slated for Testing', currentY);
        currentY += 5;
        
        if (includeNetworkTesting) {
          const ipTableData = ipAddressTable.map(row => [
            row.ipAddress,
            row.hostname,
            row.software,
            row.functionDesc
          ]);
          
          currentY = addStyledTable(
            ['IP Address(s) or Ranges', 'Hostname', 'Software & Version', 'Function'],
            ipTableData,
            currentY,
            'Table 1-3. Components Slated for Testing'
          );
        } else {
          currentY = addParagraph('Network testing is not included in the scope of this engagement.', currentY, 5);
          currentY += 5;
        }
        
        // Web Applications Table
        if (currentY > pdf.internal.pageSize.height - 80) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 40;
        }
        
        currentY += 10;
        currentY = addSubsectionTitle('III. Web Applications Slated for Testing', currentY);
        // currentY += 5;
        
        if (includeWebTesting) {
          const webAppText = 'Activities employed to perform role testing on web applications may include capturing POST and GET requests for each function. The various web based applications that make up the system, and the logins and their associated roles that will be used for testing are noted by URL in Table 1-4.';
          currentY = addParagraph(webAppText, currentY, 0);
          currentY += 5;
          
          const webAppTableData = webAppTable.map(row => [
            row.url,
            row.ipAddress,
            row.functionDesc
          ]);
          
          currentY = addStyledTable(
            ['Web URL', 'IP Address', 'Function'],
            webAppTableData,
            currentY,
            'Table 1-4. Application URLs Slated for Testing'
          );
        } else {
          currentY = addParagraph('Web application testing is not included in the scope of this engagement.', currentY, 5);
          currentY += 5;
        }
        
        // Databases Table
        if (currentY > pdf.internal.pageSize.height - 80) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        
        currentY = addSubsectionTitle('IV. Databases Slated for Testing', currentY);
        // currentY += 5;
        
        if (includeDatabaseTesting) {
          const databaseText = 'Databases that are slated for testing include those listed in Table 1-5. These databases will be assessed for security vulnerabilities, configuration issues, and access control problems.';
          currentY = addParagraph(databaseText, currentY, 0);
          currentY += 5;
          
          const databaseTableData = databaseTable.map(row => [
            row.name,
            row.hostname,
            row.ipAddress,
            row.additionalInfo
          ]);
          
          currentY = addStyledTable(
            ['Database Name', 'Hostname', 'IP Address', 'Additional Info'],
            databaseTableData,
            currentY,
            'Table 1-5. Databases Slated for Testing'
          );
        } else {
          currentY = addParagraph('Database testing is not included in the scope of this engagement.', currentY, 5);
          currentY += 5;
        }
        
        // Roles Table
        if (currentY > pdf.internal.pageSize.height - 80) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        
        currentY += 10;
        currentY = addSubsectionTitle('V. Roles Slated for Testing', currentY);
        // currentY += 5;
        
        if (includeRoleTesting) {
          const rolesText = 'Role testing will be performed to test the authorization restrictions for each role. ' + vendorName + ' will access the system while logged in as different user types and attempt to perform restricted functions as unprivileged users. Functions and roles that will be tested are noted in Table 1-6.';
          currentY = addParagraph(rolesText, currentY, 0);
          currentY += 5;
          
          const rolesTableData = rolesTable.map(row => [
            row.roleName,
            row.userId,
            row.functionsDesc
          ]);
          
          currentY = addStyledTable(
            ['Role Name', 'Test User ID', 'Associated Functions'],
            rolesTableData,
            currentY,
            'Table 1-6. Role Based Testing'
          );
        } else {
          currentY = addParagraph('Role-based testing is not included in the scope of this engagement.', currentY, 5);
          currentY += 5;
        }
        
        // Function to check if enough space remains on page (30% excluding footer)
        const hasEnoughSpace = (currentYPos) => {
          const pageHeight = pdf.internal.pageSize.height;
          const footerHeight = 20; // Approximate footer height
          const usableHeight = pageHeight - footerHeight;
          const remainingSpace = usableHeight - currentYPos;
          return (remainingSpace / usableHeight) > 0.3; // Check if more than 30% space remains
        };

        // Add Schedule section
        if (!hasEnoughSpace(currentY)) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        currentY += 5;
        currentY = addSectionTitle('4. EXPECTED TIME DURATION AND SCHEDULE', currentY);
        
        // Add timeline visualization
        pdf.setDrawColor(200, 200, 200);
        pdf.setFillColor(240, 240, 240);
        pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 30, 2, 2, 'F');
        
        // Draw timeline
        const timelineY = currentY + 15;
        const timelineStartX = 40;
        const timelineEndX = pdf.internal.pageSize.width - 40;
        
        // Timeline line
        pdf.setDrawColor(0, 123, 255);
        pdf.setLineWidth(1);
        pdf.line(timelineStartX, timelineY, timelineEndX, timelineY);
        
        // Timeline points
        const point1X = timelineStartX;
        const point2X = timelineStartX + ((timelineEndX - timelineStartX) * 0.5);
        const point3X = timelineEndX;
        
        // Draw points
        pdf.setFillColor(0, 123, 255);
        pdf.circle(point1X, timelineY, 3, 'F');
        pdf.circle(point2X, timelineY, 3, 'F');
        pdf.circle(point3X, timelineY, 3, 'F');
        
        // Add labels
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(8);
        pdf.setTextColor(80, 80, 80);
        pdf.text('Start', point1X, timelineY + 8, {align: 'center'});
        pdf.text(`Report (${reportDelivery} days)`, point2X, timelineY + 8, {align: 'center'});
        pdf.text(`Completion (${projectDuration} days)`, point3X, timelineY + 8, {align: 'center'});
        
        currentY += 40;
        
        const scheduleText = `The Engagement Letter requires ${vendorName} to confirm the review will be completed within ${projectDuration} days following ${clientName} approval of this Agreement.`;
        currentY = addParagraph(scheduleText, currentY);
        // currentY += 10;
        
        const reportText = `Within ${reportDelivery} days of completing the Pen Test, ${vendorName} will prepare a written report detailing the findings of the Pen Test ("Pen Test Report"). Upon completion, ${vendorName} will simultaneously deliver the Report to the members of the Board of Directors of ${clientName}.`;
        currentY = addParagraph(reportText, currentY);
        currentY += 10;
        
        // Add Acceptance section
        if (!hasEnoughSpace(currentY)) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        currentY = addSectionTitle('5. ACCEPTANCE OF PROPOSED SERVICES', currentY);
        
        // Add decorative elements for included testing
        pdf.setFillColor(230, 240, 255);
        pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 10, 2, 2, 'F');
        
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(11);
        pdf.setTextColor(0, 80, 170);
        pdf.text('I. Security Testing May Include', 25, currentY + 7);
        currentY += 15;
        
        // Add included testing items with checkmarks
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(10);
        pdf.setTextColor(60, 60, 60);
        
        includedTestingItems.forEach(item => {
          // Draw checkmark
          pdf.setFillColor(0, 180, 0);
          pdf.circle(25, currentY + 4, 2, 'F');
          
          // Add item text
          const splitItem = pdf.splitTextToSize(item, pdf.internal.pageSize.width - 60);
          pdf.text(splitItem, 30, currentY+5);
          
          // Calculate height needed for this item
          const itemHeight = splitItem.length * 5;
          currentY += itemHeight + 5;
          
          // Check if we need a new page
          if (currentY > pdf.internal.pageSize.height - 40) {
            pdf.addPage();
            pageNumber++;
            addHeader(pageNumber);
            addFooter();
            currentY = 40;
          }
        });
        
        currentY += 5;
        
        // Check if enough space remains for the next section
        if (!hasEnoughSpace(currentY)) {
          pdf.addPage();
          pageNumber++;
          addHeader(pageNumber);
          addFooter();
          currentY = 22;
        }
        
        // Add decorative elements for excluded testing
        pdf.setFillColor(255, 240, 240);
        pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 10, 2, 2, 'F');
        
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(11);
        pdf.setTextColor(170, 0, 0);
        pdf.text('II. Security Testing Will Not Include', 25, currentY + 7);
        currentY += 15;
        
        // Add excluded testing items with X marks
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(10);
        pdf.setTextColor(60, 60, 60);
        
        excludedTestingItems.forEach(item => {
          // Draw X mark
          pdf.setDrawColor(180, 0, 0);
          pdf.setLineWidth(0.5);
          pdf.line(23, currentY, 27, currentY + 4);
          pdf.line(23, currentY + 4, 27, currentY);
          
          // Add item text
          const splitItem = pdf.splitTextToSize(item, pdf.internal.pageSize.width - 60);
          pdf.text(splitItem, 30, currentY+4);
          
          // Calculate height needed for this item
          const itemHeight = splitItem.length * 5;
          currentY += itemHeight + 5;
          
          // Check if we need a new page
          if (currentY > pdf.internal.pageSize.height - 40) {
            pdf.addPage();
            pageNumber++;
            addHeader(pageNumber);
            addFooter();
            currentY = 40;
          }
        });
        
        // Add Reporting Requirements section - Always start on new page
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 22;  // Starting at Y position 22
        
        currentY = addSectionTitle('6. REPORTING REQUIREMENTS', currentY);
        
        // Add reporting icon
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setFillColor(230, 240, 255);
        // pdf.roundedRect(pdf.internal.pageSize.width - 60, currentY - 10, 30, 30, 2, 2, 'F');
        
        // Draw document icon
        // const iconX = pdf.internal.pageSize.width - 45;
        // const iconY = currentY + 5;
        // pdf.setFillColor(0, 123, 255);
        // pdf.rect(iconX - 7, iconY - 7, 14, 16, 'F');
        // pdf.setFillColor(255, 255, 255);
        // pdf.rect(iconX - 5, iconY - 5, 10, 2, 'F');
        // pdf.rect(iconX - 5, iconY - 1, 10, 2, 'F');
        // pdf.rect(iconX - 5, iconY + 3, 10, 2, 'F');
        
        currentY = addSubsectionTitle('I. Periodic Reports to Management', currentY);    
        const reportingText = `${vendorName} will report to ${clientName} at regular intervals and in a form to be mutually agreed, no less than every ${reportFrequency} days, concerning the status of its performance of services under this Agreement. At a minimum, ${vendorName}'s reporting will identify any respects in which the accomplishment of milestones set forth in the Pen Test Project Plan is at risk, any need(s) for assistance from ${clientName}, and any findings or observations believed by ${vendorName} to warrant inclusion in the Pen Test Report.`;
        currentY = addParagraph(reportingText, currentY);
        // currentY += 10;
        
        currentY = addSubsectionTitle('II. Ad Hoc Reports to Management', currentY);
        // currentY += 5;
        
        const adhocText = `Managing Directors assigned by ${vendorName} to this engagement shall be reasonably available to ${clientName} management by telephone, e-mail, or in-person for ad hoc consultations and status reports throughout the period of this Agreement.`;
        currentY = addParagraph(adhocText, currentY);
        // currentY += 10;
        
        currentY = addSubsectionTitle('III. Reporting to the Board', currentY);
        // currentY += 5;
        
        const boardText = `Upon reasonable notice, ${vendorName} will report to the Board of ${clientName}, or any committee of the Board charged with oversight of ${clientName}'s efforts to comply with the Engagement Letter for the purpose of discussing the status of ${vendorName}'s provision of services pursuant to this Agreement and any findings or observations ${vendorName} may have made in the course of providing such services.`;
        currentY = addParagraph(boardText, currentY);
        // currentY += 10;
        
        currentY = addSubsectionTitle('IV. Reporting to the CLIENT', currentY);
        // currentY += 5;
        
        const clientText = `If requested by ${clientName}, ${vendorName} will meet with representatives of the ${clientName} to discuss the status of the Pen Test, the findings set forth in the Pen Test Report, or any other matters germane to this engagement.`;
        currentY = addParagraph(clientText, currentY);
        // currentY += 10;
        
        // Add Terms and Conditions section - Always start on new page
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 22;  // Starting at Y position 22
        
        currentY = addSectionTitle('7. TERMS AND CONDITIONS', currentY);
        
        // Add decorative legal scales icon
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setFillColor(230, 240, 255);
        // pdf.roundedRect(pdf.internal.pageSize.width - 60, currentY - 10, 30, 30, 2, 2, 'F');
        
        // Draw scales icon
        // const scalesX = pdf.internal.pageSize.width - 45;
        // const scalesY = currentY + 5;
        // pdf.setDrawColor(0, 80, 170);
        // pdf.setLineWidth(0.5);
        // // Draw the balance beam
        // pdf.line(scalesX - 10, scalesY, scalesX + 10, scalesY);
        // // Draw the stand
        // pdf.line(scalesX, scalesY, scalesX, scalesY - 5);
        // pdf.line(scalesX - 3, scalesY - 5, scalesX + 3, scalesY - 5);
        // // Draw the scales
        // pdf.circle(scalesX - 7, scalesY + 3, 3);
        // pdf.circle(scalesX + 7, scalesY + 3, 3);
        
        currentY = addSubsectionTitle('A. DEFINITIONS', currentY);
        currentY += 5;
        
        // Add definitions with styled numbering
        const definitions = [
          { term: '"Affiliates"', definition: `means ${clientName} and any present or future subsidiary thereof.` },
          { term: '"Confidential Information"', definition: 'means any and all information, including trade secrets, knowhow and proprietary information, techniques, plans or any other information relating to the business of a Party.' },
          { term: '"Customer/Consumer Information"', definition: `means any and all information or data that is provided by, through or on behalf of ${clientName} or any Affiliate to any ${vendorName} Personnel.` },
          { term: '"Deliverables"', definition: `means materials that ${vendorName} will furnish to ${clientName} as a result of the services performed under this Agreement, including, but not limited to the Pen Test Report.` },
          { term: '"Intellectual Property Rights"', definition: 'means all patents, patent applications, copyrights, trade secrets, service marks, trademarks, trade names, and other proprietary and intellectual property rights.' }
        ];
        
        definitions.forEach((item, index) => {
          // Draw numbered circle
          pdf.setFillColor(230, 240, 255);
          pdf.circle(25, currentY + 2, 4, 'F');  // Reduced radius from 6 to 4
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(7);  // Slightly smaller font for better fit
          pdf.setTextColor(60, 60, 60);
          pdf.text((index + 1).toString(), 25, currentY + 2, {align: 'center', baseline: 'middle'});
          
          // Add term and definition
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(10);
          pdf.setTextColor(60, 60, 60);
          pdf.text(item.term, 35, currentY);
          
          pdf.setFont('helvetica', 'normal');
          const splitDef = pdf.splitTextToSize(item.definition, pdf.internal.pageSize.width - 70);
          pdf.text(splitDef, 35, currentY + 5);
          
          // Calculate height needed for this item
          const itemHeight = splitDef.length * 5 + 10;
          currentY += itemHeight;
          
          // Check if we need a new page
          if (currentY > pdf.internal.pageSize.height - 40) {
            pdf.addPage();
            pageNumber++;
            addHeader(pageNumber);
            addFooter();
            currentY = 40;
          }
        });
        
        // Add signature section at the end with styling
        // pdf.addPage();
        // pageNumber++;
        // addHeader(pageNumber);
        // addFooter();
        
        // // Add decorative background for signature page
        // pdf.setFillColor(245, 245, 250);
        // pdf.rect(0, 0, pdf.internal.pageSize.width, pdf.internal.pageSize.height, 'F');
        
        // // Add decorative top border
        // pdf.setFillColor(0, 123, 255, 0.7);
        // pdf.rect(0, 0, pdf.internal.pageSize.width, 15, 'F');
        
        // // Add decorative bottom border
        // pdf.setFillColor(0, 123, 255, 0.7);
        // pdf.rect(0, pdf.internal.pageSize.height - 15, pdf.internal.pageSize.width, 15, 'F');
        
        // // Re-add header and footer since we covered them
        // addHeader(pageNumber);
        // addFooter();
        
        // // Add decorative element
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setFillColor(0, 123, 255, 0.1);
        // pdf.roundedRect(20, 60, pdf.internal.pageSize.width - 40, 30, 3, 3, 'F');
        
        // // Signature title with styling
        // pdf.setFont('helvetica', 'bold');
        // pdf.setFontSize(16);
        // pdf.setTextColor(0, 80, 170);
        // pdf.text('IN WITNESS WHEREOF', pdf.internal.pageSize.width/2, 75, {align: 'center'});
        
        // pdf.setFont('helvetica', 'normal');
        // pdf.setFontSize(11);
        // pdf.setTextColor(80, 80, 80);
        // pdf.text('the parties have executed this Agreement as of the date first written above.', pdf.internal.pageSize.width/2, 85, {align: 'center'});
        
        // // Add document seal/stamp image placeholder
        // pdf.setDrawColor(200, 200, 200);
        // pdf.setFillColor(245, 245, 245, 0.7);
        // pdf.circle(pdf.internal.pageSize.width/2, 120, 25, 'FD');
        
        // // Add text in the seal
        // pdf.setFont('helvetica', 'bold');
        // pdf.setFontSize(8);
        // pdf.setTextColor(100, 100, 100);
        // pdf.text('OFFICIAL', pdf.internal.pageSize.width/2, 115, {align: 'center'});
        // pdf.text('DOCUMENT', pdf.internal.pageSize.width/2, 122, {align: 'center'});
        // pdf.text('SEAL', pdf.internal.pageSize.width/2, 129, {align: 'center'});
        
        // // Draw radial lines in the seal
        // pdf.setDrawColor(180, 180, 180);
        // pdf.setLineWidth(0.2);
        // for (let i = 0; i < 12; i++) {
        //   const angle = (i * 30) * Math.PI / 180;
        //   const innerX = pdf.internal.pageSize.width/2 + Math.cos(angle) * 15;
        //   const innerY = 120 + Math.sin(angle) * 15;
        //   const outerX = pdf.internal.pageSize.width/2 + Math.cos(angle) * 25;
        //   const outerY = 120 + Math.sin(angle) * 25;
        //   pdf.line(innerX, innerY, outerX, outerY);
        // }

        // // Signature blocks with styling
        // const signatureY = 160;
        // const leftX = 40;
        // const rightX = pdf.internal.pageSize.width - 80;

        // // Client signature box
        // pdf.setFillColor(255, 255, 255, 0.8);
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setLineWidth(0.5);
        // pdf.roundedRect(leftX - 15, signatureY - 15, 90, 100, 3, 3, 'FD');
        
        // // Add decorative corner elements to client box
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setLineWidth(1);
        // // Top left corner
        // pdf.line(leftX - 15, signatureY - 5, leftX - 5, signatureY - 15);
        // // Top right corner
        // pdf.line(leftX + 65, signatureY - 15, leftX + 75, signatureY - 5);
        // // Bottom left corner
        // pdf.line(leftX - 15, signatureY + 75, leftX - 5, signatureY + 85);
        // // Bottom right corner
        // pdf.line(leftX + 65, signatureY + 85, leftX + 75, signatureY + 75);
        
        // pdf.setFont('helvetica', 'bold');
        // pdf.setFontSize(12);
        // pdf.setTextColor(0, 80, 170);
        // pdf.text('CLIENT', leftX + 30, signatureY, {align: 'center'});
        // pdf.text(clientName, leftX + 30, signatureY + 10, {align: 'center'});
        
        // pdf.setDrawColor(100, 100, 100);
        // pdf.setLineWidth(0.2);
        // pdf.line(leftX, signatureY + 35, leftX + 60, signatureY + 35);
        
        // pdf.setFont('helvetica', 'normal');
        // pdf.setFontSize(9);
        // pdf.setTextColor(80, 80, 80);
        // pdf.text('Authorized Signature', leftX + 30, signatureY + 40, {align: 'center'});

        // pdf.line(leftX, signatureY + 55, leftX + 60, signatureY + 55);
        // pdf.text('Name/Title', leftX + 30, signatureY + 60, {align: 'center'});

        // pdf.line(leftX, signatureY + 75, leftX + 60, signatureY + 75);
        // pdf.text('Date', leftX + 30, signatureY + 80, {align: 'center'});

        // // Vendor signature box
        // pdf.setFillColor(255, 255, 255, 0.8);
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setLineWidth(0.5);
        // pdf.roundedRect(rightX - 15, signatureY - 15, 90, 100, 3, 3, 'FD');
        
        // // Add decorative corner elements to vendor box
        // pdf.setDrawColor(0, 123, 255);
        // pdf.setLineWidth(1);
        // // Top left corner
        // pdf.line(rightX - 15, signatureY - 5, rightX - 5, signatureY - 15);
        // // Top right corner
        // pdf.line(rightX + 65, signatureY - 15, rightX + 75, signatureY - 5);
        // // Bottom left corner
        // pdf.line(rightX - 15, signatureY + 75, rightX - 5, signatureY + 85);
        // // Bottom right corner
        // pdf.line(rightX + 65, signatureY + 85, rightX + 75, signatureY + 75);
        
        // pdf.setFont('helvetica', 'bold');
        // pdf.setFontSize(12);
        // pdf.setTextColor(0, 80, 170);
        // pdf.text('VENDOR', rightX + 30, signatureY, {align: 'center'});
        // pdf.text(vendorName, rightX + 30, signatureY + 10, {align: 'center'});
        
        // pdf.setDrawColor(100, 100, 100);
        // pdf.setLineWidth(0.2);
        // pdf.line(rightX, signatureY + 35, rightX + 60, signatureY + 35);
        
        // pdf.setFont('helvetica', 'normal');
        // pdf.setFontSize(9);
        // pdf.setTextColor(80, 80, 80);
        // pdf.text('Authorized Signature', rightX + 30, signatureY + 40, {align: 'center'});

        // pdf.line(rightX, signatureY + 55, rightX + 60, signatureY + 55);
        // pdf.text('Name/Title', rightX + 30, signatureY + 60, {align: 'center'});

        // pdf.line(rightX, signatureY + 75, rightX + 60, signatureY + 75);
        // pdf.text('Date', rightX + 30, signatureY + 80, {align: 'center'});
        
        // // Add a final note at the bottom
        // pdf.setFont('helvetica', 'italic');
        // pdf.setFontSize(8);
        // pdf.setTextColor(100, 100, 100);
        // pdf.text('This document is confidential and contains proprietary information.', 
        //          pdf.internal.pageSize.width/2, pdf.internal.pageSize.height - 25, {align: 'center'});
        
        // Save the PDF with a formatted filename
        const formattedDate = new Date().toISOString().split('T')[0];
        const safeClientName = clientName.replace(/[^a-z0-9]/gi, '_');
        pdf.save(`${safeClientName}_PenTest_Engagement_Letter_${formattedDate}.pdf`);
    };

    return {
        generatePDF
    };
};

export default PentestPdfGenerator;
