import React, { useState, useEffect, useRef } from 'react';
import { useDispatch } from 'react-redux';
import { createVulnerability } from '../../redux/actions/vulnerabilityActions';
import * as echarts from 'echarts';
import { toast } from 'react-hot-toast';

const ReportVulnerabilityModal = ({ isOpen, onClose, selectedProject, onVulnerabilityAdded }) => {
  const dispatch = useDispatch();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  const [cvssScore, setCvssScore] = useState(0);
  const [formData, setFormData] = useState({
    title: '',
    projectName: selectedProject || '',
    reportId: '',
    reporterName: '',
    summary: '',
    affectedComponents: '',
    vulnerabilityName: '',
    severity: '',
    visibility: 'private',
    cweReference: '',
    pocSteps: '',
    exploitCode: '',
    impactAnalysis: '',
    shortTermFix: '',
    longTermFix: '',
    conclusion: '',
    category: 'Other'
  });

  // Calculate Risk Level based on CVSS Score
  const calculateRiskLevel = (score) => {
    if (score >= 9.0) return 'critical';
    if (score >= 7.0) return 'high';
    if (score >= 4.0) return 'medium';
    return 'low';
  };

  const severityOptions = ['critical', 'high', 'medium', 'low'];
  const visibilityOptions = ['private', 'public'];

  const chartRef = useRef(null);
  const chartInstance = useRef(null);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Initialize form data with default values
  useEffect(() => {
    if (isOpen) {
      // Generate a unique report ID
      const uniqueId = `VUL-${Date.now().toString().slice(-6)}`;
      
      setFormData(prev => ({
        ...prev,
        projectName: selectedProject || '',
        reportId: uniqueId
      }));
    }
  }, [isOpen, selectedProject]);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    if (!formData.reportId.trim()) {
      newErrors.reportId = 'Report ID is required';
    }
    if (!formData.reporterName.trim()) {
      newErrors.reporterName = 'Reporter name is required';
    }
    if (!formData.vulnerabilityName.trim()) {
      newErrors.vulnerabilityName = 'Vulnerability name is required';
    }
    if (!formData.severity) {
      newErrors.severity = 'Severity is required';
    }
    if (!formData.affectedComponents.trim()) {
      newErrors.affectedComponents = 'Affected components are required';
    }
    if (!formData.impactAnalysis.trim()) {
      newErrors.impactAnalysis = 'Impact analysis is required';
    }

    // Display validation errors in console for debugging
    if (Object.keys(newErrors).length > 0) {
      console.log('Validation errors:', newErrors);
      console.log('Current form data:', formData);
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log('Submit button clicked!', e);

    // Check form validation
    const isValid = validateForm();
    console.log('Form validation result:', isValid);
    
    if (!isValid) {
      console.log('Form validation failed');
      // Show toast notification for validation errors
      toast.error('Please fill in all required fields');
      return;
    }

    setIsSubmitting(true);
    try {
      const vulnerabilityData = {
        ...formData,
        cvssScore: cvssScore,
        riskLevel: calculateRiskLevel(cvssScore),
        status: 'open',
        discoveredDate: new Date().toISOString(),
      };

      console.log('Submitting vulnerability data:', JSON.stringify(vulnerabilityData, null, 2));
      
      // Use Redux action to create vulnerability
      const resultAction = await dispatch(createVulnerability(vulnerabilityData));
      
      if (createVulnerability.fulfilled.match(resultAction)) {
        // Success! The toast is already shown in the action
        toast.success('New vulnerability added successfully!');
        
        // Call the callback function to refresh the vulnerabilities list
        if (onVulnerabilityAdded) {
          onVulnerabilityAdded();
        }
        
        onClose(); // Close the modal
        return;
      } else {
        throw new Error(resultAction.error?.message || 'Failed to create vulnerability');
      }
    } catch (error) {
      console.error('Detailed error submitting form:', {
        message: error.message,
        stack: error.stack
      });
      toast.error(`Failed to submit report: ${error.message || 'Unknown error'}`);
      setErrors({ submit: error.message });
    } finally {
      setIsSubmitting(false);
    }
  };

  useEffect(() => {
    // Only initialize chart if modal is open and DOM element exists
    if (isOpen && chartRef.current) {
      // Dispose existing instance if any
      if (chartInstance.current) {
        chartInstance.current.dispose();
      }

      // Initialize new chart instance
      chartInstance.current = echarts.init(chartRef.current);
      const option = {
        series: [{
          type: 'gauge',
          min: 0,
          max: 10,
          splitNumber: 10,
          radius: '100%',
          axisLine: {
            lineStyle: {
              width: 30,
              color: [
                [0.3, '#67e0e3'],
                [0.7, '#37a2da'],
                [1, '#fd666d']
              ]
            }
          },
          pointer: {
            itemStyle: {
              color: 'auto'
            }
          },
          axisTick: {
            distance: -30,
            length: 8,
            lineStyle: {
              color: '#fff',
              width: 2
            }
          },
          splitLine: {
            distance: -30,
            length: 30,
            lineStyle: {
              color: '#fff',
              width: 4
            }
          },
          axisLabel: {
            color: 'inherit',
            distance: 40,
            fontSize: 12
          },
          detail: {
            valueAnimation: true,
            formatter: '{value}',
            color: 'inherit'
          },
          data: [{
            value: cvssScore
          }]
        }],
        animation: false
      };

      chartInstance.current.setOption(option);
    }

    // Cleanup function
    return () => {
      if (chartInstance.current) {
        chartInstance.current.dispose();
        chartInstance.current = null;
      }
    };
  }, [isOpen, cvssScore]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-gray-50 w-full max-w-4xl max-h-[90vh] overflow-y-auto rounded-lg">
        <div className="sticky top-0 bg-white border-b border-gray-200 p-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Vulnerability Report Form</h1>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-lg p-8">

          {/* Details Section */}
          <div className="space-y-6 mb-8">
            <h2 className="text-xl font-semibold text-gray-800">Basic Details</h2>
            
            {/* Project Name - Read Only */}
            <div className="grid grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Report Title
                </label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${errors.title ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                  placeholder="Enter report title"
                  required
                />
                {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Severity
                </label>
                <select
                  name="severity"
                  value={formData.severity}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${errors.severity ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                  required
                >
                  <option value="">Select Severity</option>
                  {severityOptions.map((option) => (
                    <option key={option} value={option}>
                      {option.charAt(0).toUpperCase() + option.slice(1)}
                    </option>
                  ))}
                </select>
                {errors.severity && <p className="text-red-500 text-sm mt-1">{errors.severity}</p>}
              </div>


            </div>

            <div className="grid grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Visibility
                </label>
                <select
                  name="visibility"
                  value={formData.visibility}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  {visibilityOptions.map((option) => (
                    <option key={option} value={option}>
                      {option.charAt(0).toUpperCase() + option.slice(1)}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  CVSS Score
                </label>
                <div className="grid grid-cols-2 gap-6">
                  <input
                    type="range"
                    min="0"
                    max="10"
                    step="0.1"
                    value={cvssScore}
                    onChange={(e) => setCvssScore(parseFloat(e.target.value))}
                    className="w-full"
                  />
                  <div ref={chartRef} className="h-48"></div>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Risk Level
                </label>
                <input
                  type="text"
                  value={calculateRiskLevel(cvssScore)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-50"
                  readOnly
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Vulnerability Name
                </label>
                <input
                  type="text"
                  name="vulnerabilityName"
                  value={formData.vulnerabilityName}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${errors.vulnerabilityName ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                  placeholder="Enter vulnerability name"
                  required
                />
                {errors.vulnerabilityName && <p className="text-red-500 text-sm mt-1">{errors.vulnerabilityName}</p>}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Reporter Name
                </label>
                <input
                  type="text"
                  name="reporterName"
                  value={formData.reporterName}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${errors.reporterName ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                  placeholder="Enter reporter name"
                  required
                />
                {errors.reporterName && <p className="text-red-500 text-sm mt-1">{errors.reporterName}</p>}
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Report ID
                </label>
                <input
                  type="text"
                  name="reportId"
                  value={formData.reportId}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${errors.reportId ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                  placeholder="Enter report ID"
                  required
                />
                {errors.reportId && <p className="text-red-500 text-sm mt-1">{errors.reportId}</p>}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  CWE Reference
                </label>
                <input
                  type="text"
                  name="cweReference"
                  value={formData.cweReference}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter CWE reference"
                />
              </div>
            </div>
          </div>

          {/* Analysis Section */}
          <div className="space-y-6 mb-8">
            <h2 className="text-xl font-semibold text-gray-800">Analysis</h2>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Affected Components
              </label>
              <textarea
                name="affectedComponents"
                value={formData.affectedComponents}
                onChange={handleInputChange}
                rows={4}
                className={`w-full px-4 py-2 border ${errors.affectedComponents ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                placeholder="List affected components"
                required
              ></textarea>
              {errors.affectedComponents && <p className="text-red-500 text-sm mt-1">{errors.affectedComponents}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Impact Analysis
              </label>
              <textarea
                name="impactAnalysis"
                value={formData.impactAnalysis}
                onChange={handleInputChange}
                rows={4}
                className={`w-full px-4 py-2 border ${errors.impactAnalysis ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-blue-500 focus:border-blue-500`}
                placeholder="Describe the impact"
                required
              ></textarea>
              {errors.impactAnalysis && <p className="text-red-500 text-sm mt-1">{errors.impactAnalysis}</p>}
            </div>
          </div>

          {/* Remediation Section */}
          <div className="space-y-6 mb-8">
            <h2 className="text-xl font-semibold text-gray-800">Remediation</h2>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Short-term Fix
              </label>
              <textarea
                name="shortTermFix"
                value={formData.shortTermFix}
                onChange={handleInputChange}
                rows={4}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="Describe short-term remediation steps"
                required
              ></textarea>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Long-term Fix
              </label>
              <textarea
                name="longTermFix"
                value={formData.longTermFix}
                onChange={handleInputChange}
                rows={4}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="Describe long-term remediation steps"
                required
              ></textarea>
            </div>
          </div>

          {/* Conclusion Section */}
          <div className="space-y-6 mb-8">
            <h2 className="text-xl font-semibold text-gray-800">Conclusion</h2>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Conclusion
              </label>
              <textarea
                name="conclusion"
                value={formData.conclusion}
                onChange={handleInputChange}
                rows={6}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter conclusion and next steps"
                required
              ></textarea>
            </div>
          </div>

          <div className="flex justify-end gap-4 sticky bottom-0 bg-white p-4 border-t border-gray-200">
            <button
              type="button"
              className="px-6 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50"
              onClick={onClose}
              disabled={isSubmitting}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 flex items-center"
              disabled={isSubmitting}
              onClick={(e) => console.log('Submit button onClick event:', e)}
            >
              {isSubmitting ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Submitting...
                </>
              ) : (
                'Submit Report'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ReportVulnerabilityModal;