import jsPDF from 'jspdf';
import 'jspdf-autotable';

const PentestPdfGenerator = ({
  clientName,
  clientAddress,
  vendorName,
  vendorAddress,
  date,
  contactName,
  projectDuration,
  reportDelivery,
  reportFrequency,
  includeWebTesting,
  includeNetworkTesting,
  includeDatabaseTesting,
  includeRoleTesting,
  systemInfoTable,
  locationTable,
  ipAddressTable,
  webAppTable,
  databaseTable,
  rolesTable,
  includedTestingItems,
  excludedTestingItems,
}) => {

  const generatePDF = () => {
    const pdf = new jsPDF('p', 'mm', 'a4');

    const addWatermark = () => {
      // Save current state
      const currentFontSize = pdf.getFontSize();
      const currentTextColor = pdf.getTextColor();
      const currentFontStyle = pdf.getFont();

      // Set watermark properties
      pdf.setFont('helvetica', 'italic');
      pdf.setFontSize(72); // Larger font size
      pdf.setTextColor(240, 240, 240); // Even lighter gray for subtlety

      // Calculate page dimensions
      const pageWidth = pdf.internal.pageSize.width;
      const pageHeight = pdf.internal.pageSize.height;

      // Add multiple watermarks to cover the page
      for (let y = 0; y < pageHeight + 100; y += 120) { // Increased spacing
        for (let x = -50; x < pageWidth + 100; x += 200) { // Multiple columns
          pdf.saveGraphicsState();
          pdf.translate(x, y);
          pdf.rotate(-45); // Diagonal angle
          pdf.text('CONFIDENTIAL', 0, 0, {
            align: 'center',
            baseline: 'middle'
          });
          pdf.restoreGraphicsState();
        }
      }

      // Restore previous state
      pdf.setFontSize(currentFontSize);
      pdf.setTextColor(currentTextColor);
      pdf.setFont(currentFontStyle.fontName, currentFontStyle.fontStyle);
    };

    // Add header to each page
    const addHeader = (pageNumber) => {
      pdf.setFillColor(245, 245, 245); // Light gray color
      pdf.rect(0, 0, pdf.internal.pageSize.width, 15, 'F'); // Full width with 15px height

      if (pageNumber === 1) {
        // Add document title in center only on first page
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(12); // Reduced font size for smaller header
        pdf.setTextColor(51, 51, 51);
        pdf.text('PEN TEST ENGAGEMENT LETTER', pdf.internal.pageSize.width / 2, 28, { align: 'center' }); // Adjusted Y position for smaller header
      }
    };

    // Add footer to each page
    const addFooter = () => {
      const pageHeight = pdf.internal.pageSize.height;

      pdf.setDrawColor(220, 220, 220);
      pdf.setLineWidth(0.1);
      pdf.line(20, pageHeight - 15, pdf.internal.pageSize.width - 20, pageHeight - 15);

      pdf.setFont('helvetica', 'italic');
      pdf.setFontSize(10);
      pdf.setTextColor(255, 0, 0);
      pdf.text('CONFIDENTIAL', pdf.internal.pageSize.width / 2, pageHeight - 7, { align: 'center' });

      pdf.setTextColor(100, 100, 100);
      const currentDate = new Date().toLocaleDateString('en-GB');
      pdf.text(`Generated on: ${currentDate}`, 20, pageHeight - 5);
      pdf.text(`Page ${pageNumber}`, pdf.internal.pageSize.width - 20, pageHeight - 5, { align: 'right' });
    };

    const addSectionTitle = (title, yPosition) => {
      pdf.setFillColor(240, 240, 240);
      pdf.rect(20, yPosition - 6, pdf.internal.pageSize.width - 40, 10, 'F');
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(12);
      pdf.setTextColor(0, 80, 170);
      pdf.text(title, 25, yPosition);

      return yPosition + 15; 
    };

    const addSubsectionTitle = (title, yPosition) => {
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(11);
      pdf.setTextColor(80, 80, 80);
      pdf.text(title, 20, yPosition);

      pdf.setDrawColor(200, 200, 200);
      pdf.setLineWidth(0.2);
      pdf.line(25, yPosition + 1, 25 + pdf.getTextWidth(title), yPosition + 1);

      return yPosition + 10; 
    };

    const addParagraph = (text, yPosition, indent = 0) => {
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(10);
      pdf.setTextColor(60, 60, 60);

      const splitText = pdf.splitTextToSize(text, pdf.internal.pageSize.width - 40 - indent);
      pdf.text(splitText, 20 + indent, yPosition);

      return yPosition + (splitText.length * 5) + 5;
    };

    const addStyledTable = (headers, data, yPosition, title = null) => {
      if (title) {
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        // pdf.setTextColor(0, 80, 170);
        pdf.text(title, 20, yPosition - 5);
      }

      pdf.autoTable({
        startY: yPosition,
        head: [headers],
        body: data,
        margin: { left: 20, right: 20 },
        headStyles: {
          // fillColor: [0, 0, 0],
          fillColor: [230, 240, 255],
          textColor: [0, 80, 170],
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 9,
          cellPadding: 3
        },
        alternateRowStyles: {
          fillColor: [255, 240, 240]
        },
      });

      return pdf.lastAutoTable.finalY + 10;
    };

    let pageNumber = 1;
    let currentY = 45;

    addHeader(pageNumber);
    addFooter();

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(80, 80, 80);
    pdf.text(date, 20, currentY);
    currentY += 5;
    pdf.text(clientName, 20, currentY);
    currentY += 5;
    pdf.text(clientAddress, 20, currentY);
    currentY += 8;

    // Add greeting with styling
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Dear ${contactName},`, 20, currentY);
    currentY += 10;

    // Add opening paragraph with word wrapping and styling
    const openingText = `This letter agreement, if acceptable to and countersigned by you, will serve as the agreement ("Agreement") between ${clientName} and ${vendorName} governing ${vendorName}'s conduct of the Pen Test ("Pen Test") required by the "Pen Test Section" of this Engagement Letter. The effective date of the Agreement (the "Effective Date") will be the date on which this letter agreement is executed by ${clientName}. ${vendorName} and ${clientName} are each referred to herein as a "Party" and collectively, the "Parties."`;
    currentY = addParagraph(openingText, currentY);
    currentY += 2;

    // Background section with styling
    currentY = addSectionTitle('1. BACKGROUND', currentY);

    const backgroundText = `The ${clientName} board requires, within 45 days of the date of the respective board meeting, to retain an independent consultant to conduct an independent security review of all ${clientName} information systems. The review is to include a comprehensive vulnerability and risk assessment, security posture assessment, and assessment of security controls implemented across ${clientName} information systems. This Agreement, together with its attachments, constitutes that engagement letter.`;
    currentY = addParagraph(backgroundText, currentY);

    currentY = addSectionTitle('2. ORGANIZATION OF THIS AGREEMENT', currentY);

    const organizationText = `Section 3 of this document sets forth the scope of pen testing service, section 4 list the proposed services, section 5 prescribes the timing of pen testing services, section 6 defines reporting requirements and section 7 sets forth the terms and conditions for this pen test assignment.`;
    currentY = addParagraph(organizationText, currentY);
    currentY += 5;
    if (currentY > pdf.internal.pageSize.height - 80) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 40;
    }
    currentY = addSectionTitle('3. SCOPE OF PEN TESTING SERVICE', currentY);
    currentY = addSubsectionTitle('I. System Name/Title', currentY);
    currentY += 5;

    const systemTableData = systemInfoTable.map(row => [
      row.identifier,
      row.systemName,
      row.abbreviation
    ]);

    currentY = addStyledTable(
      ['Unique Identifier', 'Information System Name', 'Information System Abbreviation'],
      systemTableData,
      currentY,
      'Table 1-1. Information System Name and Title'
    );

    // Check if we need a new page based on remaining space
    if (currentY > pdf.internal.pageSize.height - 120) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }
    // currentY += 10;
    currentY = addSubsectionTitle('II. IP Addresses Slated for Testing', currentY);
    currentY += 5;

    if (includeNetworkTesting) {
      const ipTableData = ipAddressTable.map(row => [
        row.ipAddress,
        row.hostname,
        row.software,
        row.functionDesc
      ]);

      currentY = addStyledTable(
        ['IP Address(s) or Ranges', 'Hostname', 'Software & Version', 'Function'],
        ipTableData,
        currentY,
        'Table 1-3. Components Slated for Testing'
      );
    } else {
      currentY = addParagraph('Network testing is not included in the scope of this engagement.', currentY, 5);
      currentY += 5;
    }

    // Web Applications Table
    if (currentY > pdf.internal.pageSize.height - 80) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 40;
    }

    currentY += 10;
    currentY = addSubsectionTitle('III. Web Applications Slated for Testing', currentY);
    // currentY += 5;

    if (includeWebTesting) {
      const webAppText = 'Activities employed to perform role testing on web applications may include capturing POST and GET requests for each function. The various web based applications that make up the system, and the logins and their associated roles that will be used for testing are noted by URL in Table 1-4.';
      currentY = addParagraph(webAppText, currentY, 0);
      currentY += 5;

      const webAppTableData = webAppTable.map(row => [
        row.url,
        row.ipAddress,
        row.functionDesc
      ]);

      currentY = addStyledTable(
        ['Web URL', 'IP Address', 'Function'],
        webAppTableData,
        currentY,
        'Table 1-4. Application URLs Slated for Testing'
      );
    } else {
      currentY = addParagraph('Web application testing is not included in the scope of this engagement.', currentY, 5);
      currentY += 5;
    }

    // Databases Table
    if (currentY > pdf.internal.pageSize.height - 80) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }

    currentY = addSubsectionTitle('IV. Databases Slated for Testing', currentY);
    // currentY += 5;

    if (includeDatabaseTesting) {
      const databaseText = 'Databases that are slated for testing include those listed in Table 1-5. These databases will be assessed for security vulnerabilities, configuration issues, and access control problems.';
      currentY = addParagraph(databaseText, currentY, 0);
      currentY += 5;

      const databaseTableData = databaseTable.map(row => [
        row.name,
        row.hostname,
        row.ipAddress,
        row.additionalInfo
      ]);

      currentY = addStyledTable(
        ['Database Name', 'Hostname', 'IP Address', 'Additional Info'],
        databaseTableData,
        currentY,
        'Table 1-5. Databases Slated for Testing'
      );
    } else {
      currentY = addParagraph('Database testing is not included in the scope of this engagement.', currentY, 5);
      currentY += 5;
    }

    // Roles Table
    if (currentY > pdf.internal.pageSize.height - 80) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }

    currentY += 10;
    currentY = addSubsectionTitle('V. Roles Slated for Testing', currentY);
    // currentY += 5;

    if (includeRoleTesting) {
      const rolesText = 'Role testing will be performed to test the authorization restrictions for each role. ' + vendorName + ' will access the system while logged in as different user types and attempt to perform restricted functions as unprivileged users. Functions and roles that will be tested are noted in Table 1-6.';
      currentY = addParagraph(rolesText, currentY, 0);
      currentY += 5;

      const rolesTableData = rolesTable.map(row => [
        row.roleName,
        row.userId,
        row.functionsDesc
      ]);

      currentY = addStyledTable(
        ['Role Name', 'Test User ID', 'Associated Functions'],
        rolesTableData,
        currentY,
        'Table 1-6. Role Based Testing'
      );
    } else {
      currentY = addParagraph('Role-based testing is not included in the scope of this engagement.', currentY, 5);
      currentY += 5;
    }

    // Function to check if enough space remains on page (30% excluding footer)
    const hasEnoughSpace = (currentYPos) => {
      const pageHeight = pdf.internal.pageSize.height;
      const footerHeight = 20; // Approximate footer height
      const usableHeight = pageHeight - footerHeight;
      const remainingSpace = usableHeight - currentYPos;
      return (remainingSpace / usableHeight) > 0.3; // Check if more than 30% space remains
    };

    // Add Schedule section
    if (!hasEnoughSpace(currentY)) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }
    currentY += 5;
    currentY = addSectionTitle('4. EXPECTED TIME DURATION AND SCHEDULE', currentY);

    // Add timeline visualization
    pdf.setDrawColor(200, 200, 200);
    pdf.setFillColor(240, 240, 240);
    pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 30, 2, 2, 'F');

    // Draw timeline
    const timelineY = currentY + 15;
    const timelineStartX = 40;
    const timelineEndX = pdf.internal.pageSize.width - 40;

    // Timeline line
    pdf.setDrawColor(0, 123, 255);
    pdf.setLineWidth(1);
    pdf.line(timelineStartX, timelineY, timelineEndX, timelineY);

    // Timeline points
    const point1X = timelineStartX;
    const point2X = timelineStartX + ((timelineEndX - timelineStartX) * 0.5);
    const point3X = timelineEndX;

    // Draw points
    pdf.setFillColor(0, 123, 255);
    pdf.circle(point1X, timelineY, 3, 'F');
    pdf.circle(point2X, timelineY, 3, 'F');
    pdf.circle(point3X, timelineY, 3, 'F');

    // Add labels
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(8);
    pdf.setTextColor(80, 80, 80);
    pdf.text('Start', point1X, timelineY + 8, { align: 'center' });
    pdf.text(`Report (${reportDelivery} days)`, point2X, timelineY + 8, { align: 'center' });
    pdf.text(`Completion (${projectDuration} days)`, point3X, timelineY + 8, { align: 'center' });

    currentY += 40;

    const scheduleText = `The Engagement Letter requires ${vendorName} to confirm the review will be completed within ${projectDuration} days following ${clientName} approval of this Agreement.`;
    currentY = addParagraph(scheduleText, currentY);
    // currentY += 10;

    const reportText = `Within ${reportDelivery} days of completing the Pen Test, ${vendorName} will prepare a written report detailing the findings of the Pen Test ("Pen Test Report"). Upon completion, ${vendorName} will simultaneously deliver the Report to the members of the Board of Directors of ${clientName}.`;
    currentY = addParagraph(reportText, currentY);
    currentY += 10;

    // Add Acceptance section
    if (!hasEnoughSpace(currentY)) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }
    currentY = addSectionTitle('5. ACCEPTANCE OF PROPOSED SERVICES', currentY);

    // Add decorative elements for included testing
    pdf.setFillColor(230, 240, 255);
    pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 10, 2, 2, 'F');

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(11);
    pdf.setTextColor(0, 80, 170);
    pdf.text('I. Security Testing May Include', 25, currentY + 7);
    currentY += 15;

    // Add included testing items with checkmarks
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(60, 60, 60);

    includedTestingItems.forEach(item => {
      // Draw checkmark
      pdf.setFillColor(0, 180, 0);
      pdf.circle(25, currentY + 4, 2, 'F');

      // Add item text
      const splitItem = pdf.splitTextToSize(item, pdf.internal.pageSize.width - 60);
      pdf.text(splitItem, 30, currentY + 5);

      // Calculate height needed for this item
      const itemHeight = splitItem.length * 5;
      currentY += itemHeight + 5;

      // Check if we need a new page
      if (currentY > pdf.internal.pageSize.height - 40) {
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 40;
      }
    });

    currentY += 5;

    // Check if enough space remains for the next section
    if (!hasEnoughSpace(currentY)) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }

    // Add decorative elements for excluded testing
    pdf.setFillColor(255, 240, 240);
    pdf.roundedRect(20, currentY, pdf.internal.pageSize.width - 40, 10, 2, 2, 'F');

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(11);
    pdf.setTextColor(170, 0, 0);
    pdf.text('II. Security Testing Will Not Include', 25, currentY + 7);
    currentY += 15;

    // Add excluded testing items with X marks
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(60, 60, 60);

    excludedTestingItems.forEach(item => {
      // Draw X mark
      pdf.setDrawColor(180, 0, 0);
      pdf.setLineWidth(0.5);
      pdf.line(23, currentY, 27, currentY + 4);
      pdf.line(23, currentY + 4, 27, currentY);

      // Add item text
      const splitItem = pdf.splitTextToSize(item, pdf.internal.pageSize.width - 60);
      pdf.text(splitItem, 30, currentY + 4);

      // Calculate height needed for this item
      const itemHeight = splitItem.length * 5;
      currentY += itemHeight + 5;

      // Check if we need a new page
      if (currentY > pdf.internal.pageSize.height - 40) {
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 40;
      }
    });

    // Add Reporting Requirements section - Always start on new page
    pdf.addPage();
    pageNumber++;
    addHeader(pageNumber);
    addFooter();
    currentY = 22;  // Starting at Y position 22

    currentY = addSectionTitle('6. REPORTING REQUIREMENTS', currentY);
    currentY = addSubsectionTitle('I. Periodic Reports to Management', currentY);
    const reportingText = `${vendorName} will report to ${clientName} at regular intervals and in a form to be mutually agreed, no less than every ${reportFrequency} days, concerning the status of its performance of services under this Agreement. At a minimum, ${vendorName}'s reporting will identify any respects in which the accomplishment of milestones set forth in the Pen Test Project Plan is at risk, any need(s) for assistance from ${clientName}, and any findings or observations believed by ${vendorName} to warrant inclusion in the Pen Test Report.`;
    currentY = addParagraph(reportingText, currentY);
    // currentY += 10;

    currentY = addSubsectionTitle('II. Ad Hoc Reports to Management', currentY);
    // currentY += 5;

    const adhocText = `Managing Directors assigned by ${vendorName} to this engagement shall be reasonably available to ${clientName} management by telephone, e-mail, or in-person for ad hoc consultations and status reports throughout the period of this Agreement.`;
    currentY = addParagraph(adhocText, currentY);
    // currentY += 10;

    currentY = addSubsectionTitle('III. Reporting to the Board', currentY);
    // currentY += 5;

    const boardText = `Upon reasonable notice, ${vendorName} will report to the Board of ${clientName}, or any committee of the Board charged with oversight of ${clientName}'s efforts to comply with the Engagement Letter for the purpose of discussing the status of ${vendorName}'s provision of services pursuant to this Agreement and any findings or observations ${vendorName} may have made in the course of providing such services.`;
    currentY = addParagraph(boardText, currentY);
    // currentY += 10;

    currentY = addSubsectionTitle('IV. Reporting to the CLIENT', currentY);
    // currentY += 5;

    const clientText = `If requested by ${clientName}, ${vendorName} will meet with representatives of the ${clientName} to discuss the status of the Pen Test, the findings set forth in the Pen Test Report, or any other matters germane to this engagement.`;
    currentY = addParagraph(clientText, currentY);
    // currentY += 10;

    // Add Terms and Conditions section - Always start on new page
    pdf.addPage();
    pageNumber++;
    addHeader(pageNumber);
    addFooter();
    currentY = 22;  // Starting at Y position 22
    currentY = addSectionTitle('7. TERMS AND CONDITIONS', currentY);
    currentY = addSubsectionTitle('A. DEFINITIONS', currentY);
    currentY += 5;

    // Add definitions with styled numbering
    const definitions = [
      { term: '"Affiliates"', definition: `means ${clientName} and any present or future subsidiary thereof.` },
      { term: '"Confidential Information"', definition: 'means any and all information, including trade secrets, knowhow and proprietary information, techniques, plans or any other information relating to the business of a Party.' },
      { term: '"Customer/Consumer Information"', definition: `means any and all information or data that is provided by, through or on behalf of ${clientName} or any Affiliate to any ${vendorName} Personnel.` },
      { term: '"Deliverables"', definition: `means materials that ${vendorName} will furnish to ${clientName} as a result of the services performed under this Agreement, including, but not limited to the Pen Test Report.` },
      { term: '"Intellectual Property Rights"', definition: 'means all patents, patent applications, copyrights, trade secrets, service marks, trademarks, trade names, and other proprietary and intellectual property rights.' }
    ];

    definitions.forEach((item, index) => {
      // Draw numbered circle
      pdf.setFillColor(230, 240, 255);
      pdf.circle(25, currentY + 2, 4, 'F');  // Reduced radius from 6 to 4
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(7);  // Slightly smaller font for better fit
      pdf.setTextColor(60, 60, 60);
      pdf.text((index + 1).toString(), 25, currentY + 2, { align: 'center', baseline: 'middle' });

      // Add term and definition
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(10);
      pdf.setTextColor(60, 60, 60);
      pdf.text(item.term, 35, currentY);

      pdf.setFont('helvetica', 'normal');
      const splitDef = pdf.splitTextToSize(item.definition, pdf.internal.pageSize.width - 70);
      pdf.text(splitDef, 35, currentY + 5);

      // Calculate height needed for this item
      const itemHeight = splitDef.length * 5 + 10;
      currentY += itemHeight;

      // Check if we need a new page
      if (currentY > pdf.internal.pageSize.height - 40) {
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 40;
      }
    });

    // Add Section B - Compliance with Engagement Letter
    currentY += 10;
    currentY = addSubsectionTitle('B. COMPLIANCE WITH ENGAGEMENT LETTER', currentY);
    currentY += 5;

    const complianceText = `The Parties intend this Agreement to comply fully with the requirements of the Pen Test Section of the Engagement Letter. In the event that the ${clientName} requires further refinement of this letter as a condition of its approval, the Parties agree to work together in good faith to make refinements acceptable to the ${clientName}.`;
    currentY = addParagraph(complianceText, currentY);
    currentY += 10;

    // Add Section C - Independence of Vendor
    if (currentY > pdf.internal.pageSize.height - 120) {
      pdf.addPage();
      pageNumber++;
      addHeader(pageNumber);
      addFooter();
      currentY = 22;
    }

    currentY = addSubsectionTitle('C. INDEPENDENCE OF VENDOR CONDUCTING PEN TEST', currentY);
    currentY += 5;

    const independenceItems = [
      `The Pen Test conducted by ${vendorName} shall not be subject to the direction, control, supervision, oversight, or influence by ${clientName}, its contractors or agents.`,
      `${vendorName} agrees that it is solely responsible for the conduct and results of the Pen Test, in accordance with the requirements of this Engagement Letter.`,
      `The conduct of the Pen Test shall be subject to the monitoring, oversight, and direction of the ${clientName}.`,
      `${vendorName} agrees to provide regular progress reports, updates and information concerning the conduct of the Pen Test to the ${clientName}.`,
      `${vendorName} will conduct the Pen Test using only personnel employed or retained by ${vendorName} to perform the work required to complete the Pen Test.`,
      `${vendorName} may utilize documents, materials or other information provided by ${clientName}, and may communicate with ${clientName}, its contractors or agents, in order to conduct the Pen Test.`,
      `${vendorName} agrees that any legal advice needed in conducting the Pen Test shall be obtained from the outside law firm whose retention for that purpose will be approved in advance by the ${clientName}.`,
      `If the ${clientName} determines, in its sole discretion, that ${vendorName} has not been fully compliant with the foregoing standards, the ${clientName} may retain a successor consultant.`
    ];

    independenceItems.forEach((item, index) => {
      // Draw numbered circle
      pdf.setFillColor(230, 240, 255);
      pdf.circle(25, currentY + 2, 4, 'F');
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(7);
      pdf.setTextColor(60, 60, 60);
      pdf.text((index + 1).toString(), 25, currentY + 2, { align: 'center', baseline: 'middle' });

      // Add item text
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(10);
      pdf.setTextColor(60, 60, 60);
      const splitItem = pdf.splitTextToSize(item, pdf.internal.pageSize.width - 70);
      pdf.text(splitItem, 35, currentY);

      // Calculate height needed for this item
      const itemHeight = splitItem.length * 5 + 10;
      currentY += itemHeight;

      // Check if we need a new page
      if (currentY > pdf.internal.pageSize.height - 40) {
        pdf.addPage();
        pageNumber++;
        addHeader(pageNumber);
        addFooter();
        currentY = 40;
      }
    });

    // Save the PDF with a formatted filename
    const formattedDate = new Date().toISOString().split('T')[0];
    const safeClientName = clientName.replace(/[^a-z0-9]/gi, '_');
    pdf.save(`${safeClientName}_PenTest_Engagement_Letter_${formattedDate}.pdf`);
  };

  return {
    generatePDF
  };
};

export default PentestPdfGenerator;
