import React from 'react';

const PenTestForm = ({
  clientName,
  setClientName,
  clientAddress,
  setClientAddress,
  vendorName,
  setVendorName,
  vendorAddress,
  setVendorAddress,
  date,
  setDate,
  contactName,
  setContactName,
  projectDuration,
  setProjectDuration,
  reportDelivery,
  setReportDelivery,
  reportFrequency,
  setReportFrequency,
  includeWebTesting,
  setIncludeWebTesting,
  includeNetworkTesting,
  setIncludeNetworkTesting,
  includeDatabaseTesting,
  setIncludeDatabaseTesting,
  includeRoleTesting,
  setIncludeRoleTesting,
  systemInfoTable,
  setSystemInfoTable,
  locationTable,
  setLocationTable,
  ipAddressTable,
  setIpAddressTable,
  webAppTable,
  setWebAppTable,
  databaseTable,
  setDatabaseTable,
  rolesTable,
  setRolesTable,
  includedTestingItems,
  setIncludedTestingItems,
  excludedTestingItems,
  setExcludedTestingItems,
  newIncludedItem,
  setNewIncludedItem,
  newExcludedItem,
  setNewExcludedItem,
  addTableRow,
  removeTableRow,
  updateTableCell,
  addIncludedItem,
  removeIncludedItem,
  addExcludedItem,
  removeExcludedItem,
  renderEditableTable
}) => {
  return (
    <div className="mb-8 p-4 border border-gray-300 bg-gray-50 rounded no-print">
      <div className="mb-6">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">Client &amp; Vendor Information</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Client Name:</label>
            <input
              type="text"
              value={clientName}
              onChange={(e) => setClientName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Client Address:</label>
            <input
              type="text"
              value={clientAddress}
              onChange={(e) => setClientAddress(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Vendor Name:</label>
            <input
              type="text"
              value={vendorName}
              onChange={(e) => setVendorName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Vendor Address:</label>
            <input
              type="text"
              value={vendorAddress}
              onChange={(e) => setVendorAddress(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">Engagement Details</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Date:</label>
            <input
              type="text"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Contact Name:</label>
            <input
              type="text"
              value={contactName}
              onChange={(e) => setContactName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Project Duration (days):</label>
            <input
              type="number"
              value={projectDuration}
              onChange={(e) => setProjectDuration(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Report Delivery (days after completion):</label>
            <input
              type="number"
              value={reportDelivery}
              onChange={(e) => setReportDelivery(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Status Report Frequency (days):</label>
            <input
              type="number"
              value={reportFrequency}
              onChange={(e) => setReportFrequency(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded"
            />
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">Testing Scope Options</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="webTesting"
              checked={includeWebTesting}
              onChange={(e) => setIncludeWebTesting(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="webTesting">Include Web Application Testing</label>
          </div>
          <div className="flex items-center">
            <input
              type="checkbox"
              id="networkTesting"
              checked={includeNetworkTesting}
              onChange={(e) => setIncludeNetworkTesting(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="networkTesting">Include Network Testing</label>
          </div>
          <div className="flex items-center">
            <input
              type="checkbox"
              id="databaseTesting"
              checked={includeDatabaseTesting}
              onChange={(e) => setIncludeDatabaseTesting(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="databaseTesting">Include Database Testing</label>
          </div>
          <div className="flex items-center">
            <input
              type="checkbox"
              id="roleTesting"
              checked={includeRoleTesting}
              onChange={(e) => setIncludeRoleTesting(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="roleTesting">Include Role-Based Testing</label>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">Security Testing May Include</h3>
        <div className="mb-4">
          <ul className="list-disc pl-8 mb-4">
            {includedTestingItems.map((item, index) => (
              <li key={index} className="mb-1 flex justify-between">
                <span>{item}</span>
                <button
                  onClick={() => removeIncludedItem(index)}
                  className="ml-2 text-red-500 hover:text-red-700 text-sm"
                >
                  Remove
                </button>
              </li>
            ))}
          </ul>
          <div className="flex">
            <input
              type="text"
              value={newIncludedItem}
              onChange={(e) => setNewIncludedItem(e.target.value)}
              placeholder="Add new testing item..."
              className="flex-grow px-3 py-2 border border-gray-300 rounded-l"
            />
            <button
              onClick={addIncludedItem}
              className="px-3 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600"
            >
              Add
            </button>
          </div>
        </div>
      </div>

      <div className="mb-2">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">Security Testing Will Not Include</h3>
        <div className="mb-4">
          <ul className="list-disc pl-8 mb-4">
            {excludedTestingItems.map((item, index) => (
              <li key={index} className="mb-1 flex justify-between">
                <span>{item}</span>
                <button
                  onClick={() => removeExcludedItem(index)}
                  className="ml-2 text-red-500 hover:text-red-700 text-sm"
                >
                  Remove
                </button>
              </li>
            ))}
          </ul>
          <div className="flex">
            <input
              type="text"
              value={newExcludedItem}
              onChange={(e) => setNewExcludedItem(e.target.value)}
              placeholder="Add new excluded item..."
              className="flex-grow px-3 py-2 border border-gray-300 rounded-l"
            />
            <button
              onClick={addExcludedItem}
              className="px-3 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600"
            >
              Add
            </button>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-md font-bold mb-2 border-b border-gray-300 pb-1">System &amp; Infrastructure Tables</h3>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">System Information Table</h4>
          {renderEditableTable(
            systemInfoTable,
            setSystemInfoTable,
            ['Unique Identifier', 'Information System Name', 'Information System Abbreviation'],
            ['identifier', 'systemName', 'abbreviation'],
            'systemInfo'
          )}
        </div>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">Location Components Table</h4>
          {renderEditableTable(
            locationTable,
            setLocationTable,
            ['Data Center Site Name', 'Address', 'Description of Components'],
            ['siteName', 'address', 'description'],
            'location'
          )}
        </div>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">IP Addresses Table</h4>
          {renderEditableTable(
            ipAddressTable,
            setIpAddressTable,
            ['IP Address(s) or Ranges', 'Hostname', 'Software & Version', 'Function'],
            ['ipAddress', 'hostname', 'software', 'functionDesc'],
            'ipAddress'
          )}
        </div>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">Web Applications Table</h4>
          {renderEditableTable(
            webAppTable,
            setWebAppTable,
            ['Web URL', 'IP Address', 'Function'],
            ['url', 'ipAddress', 'functionDesc'],
            'webApp'
          )}
        </div>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">Databases Table</h4>
          {renderEditableTable(
            databaseTable,
            setDatabaseTable,
            ['Database Name', 'Hostname', 'IP Address', 'Additional Info'],
            ['name', 'hostname', 'ipAddress', 'additionalInfo'],
            'database'
          )}
        </div>

        <div className="mb-4">
          <h4 className="text-sm font-semibold mb-1">Roles Table</h4>
          {renderEditableTable(
            rolesTable,
            setRolesTable,
            ['Role Name', 'Test User ID', 'Associated Functions'],
            ['roleName', 'userId', 'functionsDesc'],
            'roles'
          )}
        </div>
      </div>
    </div>
  );
};

export default PenTestForm; 