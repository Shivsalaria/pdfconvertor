import React, { useState } from 'react';
import * as echarts from 'echarts';
import { useNavigate } from 'react-router-dom';
import { Link } from 'react-router-dom';

const VulnerabilityReport = () => {
  const [selectedView, setSelectedView] = useState('table');
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [activeTab, setActiveTab] = useState('logs');
  const [showCodeCopied, setShowCodeCopied] = useState(false);
  const [selectedProjects, setSelectedProjects] = useState([]);
  const [sortColumn, setSortColumn] = useState('id');
  const [sortDirection, setSortDirection] = useState();
  const [searchTerm, setSearchTerm] = useState('');
  const [showBulkActions, setShowBulkActions] = useState(false);
  const [activeDropdownId, setActiveDropdownId] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showStatusDropdown, setShowStatusDropdown] = useState(false);
  const [showSeverityDropdown, setShowSeverityDropdown] = useState(false);
  const [dateRange, setDateRange] = useState('all');
  const [showDateDropdown, setShowDateDropdown] = useState(false);
  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);

  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const navigate = useNavigate();

  const vulnerabilityDetails = {
    name: "SQL Injection in Authentication Module",
    components: ["auth-service", "user-api", "login-portal"],
    cvssScore: 8.9,
    cweReference: "CWE-89"
  };

  React.useEffect(() => {
    if (selectedView === 'report' && selectedVulnerability) {
      const cvssChart = echarts.init(document.getElementById('cvssChart'));
      const option = {
        series: [{
          type: 'gauge',
          startAngle: 180,
          endAngle: 0,
          min: 0,
          max: 10,
          splitNumber: 5,
          animation: false,
          itemStyle: {
            color: '#ff4d4f'
          },
          progress: {
            show: true,
            width: 18
          },
          pointer: {
            show: false
          },
          axisLine: {
            lineStyle: {
              width: 18
            }
          },
          axisTick: {
            show: false
          },
          splitLine: {
            show: false
          },
          axisLabel: {
            show: false
          },
          title: {
            fontSize: 14
          },
          detail: {
            fontSize: 20,
            offsetCenter: [0, '0%'],
            formatter: '{value}'
          },
          data: [{
            value: selectedVulnerability.cvssScore,
            name: 'CVSS Score'
          }]
        }]
      };
      cvssChart.setOption(option);

      return () => {
        cvssChart.dispose();
      };
    }
  }, [selectedView, selectedVulnerability]);

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    setShowCodeCopied(true);
    setTimeout(() => setShowCodeCopied(false), 2000);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Active':
        return 'bg-green-100 text-green-800';
      case 'Pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'Blocked':
        return 'bg-red-100 text-red-800';
      case 'Completed':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const toggleProjectSelection = (projectId) => {
    if (selectedProjects.includes(projectId)) {
      setSelectedProjects(selectedProjects.filter(id => id !== projectId));
    } else {
      setSelectedProjects([...selectedProjects, projectId]);
    }
  };

  const toggleAllProjects = () => {
    if (selectedProjects.length === projects.length) {
      setSelectedProjects([]);
    } else {
      setSelectedProjects(projects.map(project => project.id));
    }
  };

  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const toggleDropdown = (projectId) => {
    setActiveDropdownId(activeDropdownId === projectId ? null : projectId);
  };

  const handleProjectClick = (project) => {
    setSelectedVulnerability(project);
    setSelectedView('report');
  };

  const handleBackToTable = () => {
    setSelectedView('table');
    setSelectedVulnerability(null);
  };

  const handleViewVulnerability = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setSelectedView('report');
  };

  const projects = [
    {
      id: 'AAAF/2502/1DD62',
      name: 'Global Marketing Campaign 2025',
      status: 'Active',
      team: ['Alexander Mitchell', 'Emma Thompson', 'Michael Chen', 'Sarah Williams'],
      isPublic: true,
      lastUpdated: '2025-03-03'
    },
    {
      id: 'BBAF/2502/2DD63',
      name: 'E-commerce Platform Redesign',
      status: 'Pending',
      team: ['James Wilson', 'Isabella Rodriguez', 'David Kim'],
      isPublic: false,
      lastUpdated: '2025-03-02'
    },
    {
      id: 'CCAF/2502/3DD64',
      name: 'AI Integration Initiative',
      status: 'Blocked',
      team: ['Oliver Brown', 'Sophia Garcia', 'William Taylor', 'Ava Martinez'],
      isPublic: true,
      lastUpdated: '2025-03-01'
    },
    {
      id: 'DDAF/2502/4DD65',
      name: 'Customer Experience Enhancement',
      status: 'Completed',
      team: ['Ethan Anderson', 'Mia Johnson', 'Lucas Lee'],
      isPublic: false,
      lastUpdated: '2025-02-28'
    },
    {
      id: 'EEAF/2502/5DD66',
      name: 'Mobile App Development',
      status: 'Active',
      team: ['Daniel White', 'Emily Davis', 'Christopher Martin'],
      isPublic: true,
      lastUpdated: '2025-02-27'
    },
    {
      id: 'FFAF/2502/6DD67',
      name: 'Data Analytics Dashboard',
      status: 'Pending',
      team: ['Sophie Wilson', 'Ryan Thompson', 'Victoria Chang'],
      isPublic: false,
      lastUpdated: '2025-02-26'
    }
  ];

  const staticVulnerabilities = [
    {
      id: 1,
      projectName: "Secure Thread",
      title: "SQL Injection in Login Form",
      description: "Critical SQL injection vulnerability found in authentication module",
      severity: "critical",
      cvssScore: "9.8",
      visibility: "private",
      status: "Completed",
      category: "Application"
    },
    {
      id: 4,
      projectName: "Vulnerabilty Management",
      title: "Outdated Dependencies",
      description: "Multiple outdated npm packages with known vulnerabilities",
      severity: "high",
      cvssScore: "8.5",
      visibility: "private",
      status: "in-progress",
      category: "Infrastructure"
    },
  ];

  if (selectedView === 'report') {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
        <div className="max-w-full mx-auto px-4 py-2">
          <button
            onClick={handleBackToTable}
            className="flex items-center text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors duration-200"
          >
            <i className="fas fa-arrow-left mr-2"></i>
            Back to Vulnerabilities
          </button>
        </div>

        <main className="max-w-full mx-auto">
          <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div className="max-w-full mx-auto px-4 py-6">
              <div className="flex justify-between items-center">
                <div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{selectedVulnerability.title}</h1>
                  <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                    <span>Project: {selectedVulnerability.projectName}</span>
                    <span>Status: {selectedVulnerability.status}</span>
                    <span>Category: {selectedVulnerability.category}</span>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    selectedVulnerability.severity === 'critical' ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400' :
                    selectedVulnerability.severity === 'high' ? 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-400' :
                    selectedVulnerability.severity === 'medium' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-400' :
                    'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400'
                  }`}>
                    {selectedVulnerability.severity.charAt(0).toUpperCase() + selectedVulnerability.severity.slice(1)}
                  </span>
                  <button className="!rounded-button bg-blue-600 dark:bg-blue-500 text-white px-4 py-2 text-sm font-medium hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors duration-200">
                    Export PDF
                  </button>
                </div>
              </div>
            </div>
          </header>

          {/* Vulnerability Details */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 text-gray-900 dark:text-white">Vulnerability Details</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <div className="mb-6">
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">Affected Components</h3>
                  <div className="flex flex-wrap gap-2">
                    {vulnerabilityDetails.components.map((component) => (
                      <span key={component} className="px-3 py-1 rounded-full text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                        {component}
                      </span>
                    ))}
                  </div>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">CWE Reference</h3>
                  <a href="#" className="text-blue-600 dark:text-blue-400 hover:underline">
                    {vulnerabilityDetails.cweReference}
                  </a>
                </div>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-4">CVSS Score</h3>
                <div id="cvssChart" style={{ height: '200px' }}></div>
              </div>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
      <div className="max-w-full mx-auto px-4 sm:px-0 lg:px-0">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
          <div className="flex justify-between items-center p-4">
            <h1 className="text-2xl font-semibold text-gray-900 dark:text-white">
              Vulnerablities Report
            </h1>
          </div>

          {/* Bulk Actions */}
          {selectedProjects.length > 0 && (
            <div className="bg-gray-50 dark:bg-gray-800/50 px-6 py-3 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600 dark:text-gray-400">{selectedProjects.length} selected</span>
                <button className="!rounded-button text-sm px-3 py-1 bg-red-600 dark:bg-red-500 text-white hover:bg-red-700 dark:hover:bg-red-600 whitespace-nowrap transition-colors duration-200">
                  <i className="fas fa-trash-alt mr-2"></i>Delete
                </button>
                <button className="!rounded-button text-sm px-3 py-1 bg-gray-600 dark:bg-gray-700 text-white hover:bg-gray-700 dark:hover:bg-gray-600 whitespace-nowrap transition-colors duration-200">
                  <i className="fas fa-archive mr-2"></i>Archive
                </button>
                <button className="!rounded-button text-sm px-3 py-1 bg-blue-600 dark:bg-blue-500 text-white hover:bg-blue-700 dark:hover:bg-blue-600 whitespace-nowrap transition-colors duration-200">
                  <i className="fas fa-users mr-2"></i>Assign Team
                </button>
              </div>
            </div>
          )}

          <div className="p-6 mb-2">
            <div className="flex items-center space-x-4">
              <div className="flex-1 relative">
                <input
                  type="text"
                  placeholder="Search projects..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-gray-200 dark:placeholder-gray-400 transition-colors duration-200"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <i className="fas fa-search absolute right-3 top-3 text-gray-400 dark:text-gray-500"></i>
              </div>
              <button
                onClick={() => {
                  setSearchQuery('');
                  setSelectedStatus('all');
                  setSelectedSeverity('all');
                  setSelectedCategory('all');
                  setDateRange('all');
                }}
                className="!rounded-button whitespace-nowrap px-4 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
              >
                <i className="fas fa-times mr-2"></i>
                Clear Filters
              </button>

              <div className="relative">
                <button
                  className="!rounded-button whitespace-nowrap px-4 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
                  onClick={() => setShowStatusDropdown(!showStatusDropdown)}
                >
                  Status: {selectedStatus.charAt(0).toUpperCase() + selectedStatus.slice(1)} <i className="fas fa-chevron-down ml-2"></i>
                </button>
                {showStatusDropdown && (
                  <div className="absolute z-10 mt-2 w-48 bg-white dark:bg-gray-700 rounded-lg shadow-lg border border-gray-200 dark:border-gray-600">
                    <div className="py-1">
                      {['all', 'open', 'in-progress', 'resolved', 'closed'].map((status) => (
                        <button
                          key={status}
                          className="block w-full text-left px-4 py-2 text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-200"
                          onClick={() => {
                            setSelectedStatus(status);
                            setShowStatusDropdown(false);
                          }}
                        >
                          {status.charAt(0).toUpperCase() + status.slice(1)}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              <div className="relative">
                <button
                  className="!rounded-button whitespace-nowrap px-4 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
                  onClick={() => setShowSeverityDropdown(!showSeverityDropdown)}
                >
                  Severity: {selectedSeverity.charAt(0).toUpperCase() + selectedSeverity.slice(1)} <i className="fas fa-chevron-down ml-2"></i>
                </button>
                {showSeverityDropdown && (
                  <div className="absolute z-10 mt-2 w-48 bg-white dark:bg-gray-700 rounded-lg shadow-lg border border-gray-200 dark:border-gray-600">
                    <div className="py-1">
                      {['all', 'critical', 'high', 'medium', 'low'].map((severity) => (
                        <button
                          key={severity}
                          className="block w-full text-left px-4 py-2 text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-200"
                          onClick={() => {
                            setSelectedSeverity(severity);
                            setShowSeverityDropdown(false);
                          }}
                        >
                          {severity.charAt(0).toUpperCase() + severity.slice(1)}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Project</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Visibility</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Report</th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {staticVulnerabilities.map((vuln) => (
                <tr key={vuln.id} className="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 dark:text-white">{vuln.projectName}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      vuln.visibility === 'private' ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400' : 
                      'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400'
                    }`}>
                      {vuln.visibility.charAt(0).toUpperCase() + vuln.visibility.slice(1)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      vuln.status === 'open' ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400' :
                      vuln.status === 'in-progress' ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400' :
                      vuln.status === 'resolved' ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400' :
                      'bg-gray-100 dark:bg-gray-900/30 text-gray-800 dark:text-gray-400'
                    }`}>
                      {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <Link to="/report">
                      <button
                        className="flex items-center justify-center px-4 p-2 rounded-md bg-gray-50 dark:bg-gray-700 border-dotted border-2 border-gray-300 dark:border-gray-600 text-white hover:bg-blue-200 dark:hover:bg-blue-900/30 transition-colors duration-200"
                        title="View Report"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-6 w-6 text-blue-600 dark:text-blue-400"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                          <path
                            fillRule="evenodd"
                            d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                            clipRule="evenodd"
                          />
                        </svg>
                      </button>
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <div className="bg-white dark:bg-gray-800 px-6 py-4 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  Showing <span className="font-medium">1</span> to <span className="font-medium">6</span> of{' '}
                  <span className="font-medium">6</span> results
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <button className="!rounded-button px-3 py-1 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 whitespace-nowrap transition-colors duration-200">
                  Previous
                </button>
                <button className="!rounded-button px-3 py-1 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 whitespace-nowrap transition-colors duration-200">
                  Next
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityReport;